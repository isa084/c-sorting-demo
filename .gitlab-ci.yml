# This pipeline is designed for the GitLab Free tier workaround.
# It fetches the code directly from GitHub in the first step.

# 'stages' defines the sequence of steps in our pipeline.
# Jobs in the 'build' stage run first, followed by jobs in the 'test' stage.
stages:
  - setup
  - build
  - test

variables:
  # Replace with your GitHub username and repo name.
  # Using variables makes this easy to reuse.
  GITHUB_REPO: "https://github.com/isa084/c-sorting-demo.git"
  REPO_DIR: "c-sorting-demo"

clone_repo:
  stage: setup
  tags:
    - c-builder # Must run on our runner with Docker access
  script:
    # Use the GITHUB_PAT variable we set in GitLab settings for authentication.
    # The --depth 1 makes the clone faster.
    - git clone --depth 1 "https://oauth2:${GITHUB_PAT}@${GITHUB_REPO#https://}"
    - echo "Cloned repository successfully."
  artifacts:
    # Pass the entire cloned repository directory to the next stages.
    paths:
      - $REPO_DIR/
    expire_in: 1 hour

build_job:
  # This job belongs to the 'build' stage.
  stage: build

  # 'tags' is the most critical part. It tells GitLab to send this job ONLY
  # to a runner that has the 'c-builder' tag. This is how we ensure our
  # self-hosted runner gets the work.
  tags:
    - c-builder
  needs:
    - clone_repo # Depends on the clone job
  script:
    - echo "Navigating into the cloned repository..."
    - cd $REPO_DIR
    - echo "Compiling the code..."
    - make all  # This runs the 'all' target in our Makefile, creating the 'test_runner' executable.
    - echo "Compile complete."

  # 'artifacts' defines files and directories that should be saved after a job
  # succeeds. These saved files can then be used by jobs in later stages.
  artifacts:
    paths:
      - $REPO_DIR/test_runner
    expire_in: 1 hour

# This is our second job, named 'test_job'.
test_job:
  # This job belongs to the 'test' stage, so it runs after the 'build' stage completes.
  stage: test

  # We use the same tag to ensure it runs on our dedicated runner.
  tags:
    - c-builder

  # This job depends on 'build_job'. It will only start if 'build_job' succeeds.
  # It also ensures that it will download the artifacts from 'build_job'.
  needs:
    - build_job

  # The script for this job.
  script:
    - echo "Navigating into the cloned repository..."
    - cd $REPO_DIR
    - echo "Running tests..."
    # The 'test_runner' executable is available here because it was saved as an artifact.
    # We must make it executable before running it.
    - chmod +x test_runner
    - ./test_runner  # This runs our test program. It will exit with 0 for success or 1 for failure.
    - echo "Tests complete."
